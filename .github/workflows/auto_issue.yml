name: Auto Issue on PR Open
on:
  pull_request:
    types: [opened, synchronize]

permissions:
  issues: write
  contents: read

jobs:
  detect-template:
    runs-on: ubuntu-latest
    outputs:
      template: ${{ steps.detect.outputs.template }}
    steps:
      - name: Detect template type
        id: detect
        run: |
          title="${{ github.event.pull_request.title }}"
          template="custom.md"
          if [[ "$title" =~ [bB][uU][gG] ]]; then
            template="bug_report.md"
          elif [[ "$title" =~ [fF][eE][aA][tT][uU][rR][eE] ]]; then
            template="feature_request.md"
          fi
          echo "template=$template" >> $GITHUB_OUTPUT

  create-issue:
    needs: detect-template
    runs-on: ubuntu-latest
    steps:
      # 1) 여기서는 기본(base) repo를 그대로 사용합니다.
      - name: Check out base repo (upstream)
        uses: actions/checkout@v3
        # ref: '${{ github.event.pull_request.base.ref }}'  # 보통 develop

      # 2) 템플릿 파일이 이 워크스페이스에 있어야 읽힙니다.
      - name: List ISSUE_TEMPLATE dir for debug
        run: ls -R .github/ISSUE_TEMPLATE

      - name: Create Issue from selected template
        uses: peter-evans/create-issue-from-file@v4
        with:
          content-filepath: .github/ISSUE_TEMPLATE/${{ needs.detect-template.outputs.template }}
          title: "[Auto] PR #${{ github.event.pull_request.number }} 검증"
          labels: auto-generated
          assignees: ${{ github.event.pull_request.user.login }}

      - name: Add new issue to Project Todo column
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectName = 'ci/cd 자동화 example';   // 여기에 본인의 프로젝트 이름
            const columnName  = 'Todo';                // 여기에 컬럼 이름

            // 1) 레포지토리의 모든 프로젝트 불러오기
            const { data: projects } = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo:  context.repo.repo
            });
            const project = projects.find(p => p.name === projectName);
            if (!project) throw new Error(`Project "${projectName}" not found`);

            // 2) 해당 프로젝트의 컬럼 불러오기
            const { data: columns } = await github.rest.projects.listColumns({
              project_id: project.id
            });
            const column = columns.find(c => c.name === columnName);
            if (!column) throw new Error(`Column "${columnName}" not found in project`);

            // 3) 카드 생성 (content_id에 이슈의 database id 사용)
            const issue = context.payload.issue;
            await github.rest.projects.createCard({
              column_id: column.id,
              content_id: issue.node_id,       // 또는 issue.id
              content_type: 'Issue'
            });
