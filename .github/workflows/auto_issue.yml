name: Auto Issue on PR Open
on:
  pull_request:
    types: [opened, synchronize]

permissions:
  issues: write
  contents: read

jobs:
  detect-template:
    runs-on: ubuntu-latest
    outputs:
      template: ${{ steps.detect.outputs.template }}
    steps:
      - name: Detect template type
        id: detect
        run: |
          title="${{ github.event.pull_request.title }}"
          template="custom.md"
          if [[ "$title" =~ [bB][uU][gG] ]]; then
            template="bug_report.md"
          elif [[ "$title" =~ [fF][eE][aA][tT][uU][rR][eE] ]]; then
            template="feature_request.md"
          fi
          echo "template=$template" >> $GITHUB_OUTPUT

  create-issue:
    needs: detect-template
    runs-on: ubuntu-latest
    steps:
      # 1) 여기서는 기본(base) repo를 그대로 사용합니다.
      - name: Check out base repo (upstream)
        uses: actions/checkout@v3
        # ref: '${{ github.event.pull_request.base.ref }}'  # 보통 develop

      # 2) 템플릿 파일이 이 워크스페이스에 있어야 읽힙니다.
      - name: List ISSUE_TEMPLATE dir for debug
        run: ls -R .github/ISSUE_TEMPLATE

      - name: Create Issue from selected template
        uses: peter-evans/create-issue-from-file@v4
        with:
          content-filepath: .github/ISSUE_TEMPLATE/${{ needs.detect-template.outputs.template }}
          title: "[Auto] PR #${{ github.event.pull_request.number }} 검증"
          labels: auto-generated
          assignees: ${{ github.event.pull_request.user.login }}

      - name: Add issue to ci/cd 자동화 example Project (Beta)
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const issue = context.payload.issue;

            // 1) 프로젝트(보드) 조회
            const projectName = 'ci/cd 자동화 example';
            const { repository } = await github.graphql(`
              query($owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {
                  projectsNext(first: 20) {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }`, { owner, repo });

            const project = repository.projectsNext.nodes.find(p => p.title === projectName);
            if (!project) throw new Error(\`프로젝트 "\${projectName}"을(를) 찾을 수 없습니다.\`);

            // 2) 컬럼(열) 조회
            const columnName = 'Todo';
            const { node } = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectNext {
                    columns(first: 10) {
                      nodes {
                        id
                        name
                      }
                    }
                  }
                }
              }`, { projectId: project.id });

            const column = node.columns.nodes.find(c => c.name === columnName);
            if (!column) throw new Error(\`컬럼 "\${columnName}"을(를) 찾을 수 없습니다.\`);

            // 3) 이슈를 보드에 카드로 추가
            const addResult = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectNextItem(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item { id }
                }
              }`, {
                projectId: project.id,
                contentId: issue.node_id
              });
            const itemId = addResult.addProjectNextItem.item.id;

            // 4) 카드 이동 (Todo 열로)
            await github.graphql(`
              mutation($itemId: ID!, $columnId: ID!) {
                moveProjectNextItem(input: {
                  itemId: $itemId,
                  columnId: $columnId
                }) {
                  clientMutationId
                }
              }`, {
                itemId,
                columnId: column.id
              });
